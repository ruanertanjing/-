#include <iostream>using namespace std;const int maxn = 1e7 + 5;#include <iomanip>typedef long long ll;//h#include <vector>int n, r;//int path[25];vector<int> path;void backtracking(int start){	int i;	if (path.size() == r)	{		int b;		for (i = 0; i < r; i++)		{			//b = path[i];			cout << setw(3) << path[i];		}		cout << endl;	}	for (i = start; i < n; i++)	{		path.push_back(i + 1);		backtracking(i + 1);		path.pop_back();	}}int main(){	cin >> n >> r;	backtracking(0);	return 0;}#include <iostream>using namespace std;const int maxn = 1e7 + 5;#include <iomanip>typedef long long ll;#define quickio ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);//Gint a;int main() {	quickio;	int n;	cin >> n;	ll b;	for (int i = 0; i < n; i++) {		cin >> b;		if (i != 0)		{			a ^= b;		}		else			a = b;	}	cout << a << endl;	return 0;}//c#include <iostream>using namespace std;const int maxn = 1e7 + 5;#include <iomanip>typedef long long ll;#define quickio ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);#include <queue>#include <cstring>const int MAX = 1e5 + 5;ll dis[MAX];int n, d;int cnt;int head[MAX];int vis[MAX];struct EDGE{	int v;	int w;	int next;}EDGE[MAX];//´æ±ßvoid add(int u, int v){	cnt++;	EDGE[cnt].v = v;	EDGE[cnt].w = 1;	EDGE[cnt].next = head[u];	head[u] = cnt;}int main(){	memset(dis, 0x3f, sizeof(dis));	dis[1] = 0;	cin >> n >> d;	int count = 0;	int i, u, v;	for (i = 0; i < n - 1; i++)	{		cin >> u >> v;		add(u, v);	}	priority_queue<pair<int, int>>que;	que.push({ 0, 1 });//¾àÀë£¬µãºÅ	while (!que.empty())	{		int h = que.top().first;		int qh = que.top().second;		que.pop();		for (i = head[qh]; i != 0; i = EDGE[i].next)		{			int k = EDGE[i].v;			if (dis[k] > dis[qh] + 1)			{				dis[k] = dis[qh] + 1;				que.push({ -dis[k], k });			}		}	}	for (i = 2; i <= n; i++)		if (dis[i] <= d)			count++;	cout << count << endl;	return 0;}//e#include <iostream>using namespace std;const int maxn = 1e7 + 5;#include <iomanip>typedef long long ll;#define quickio ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);int board[20005][20005];int main(){	int i, j;	int m, n, k;	cin >> n >> m >> k;	for (i = 1; i <= n; i++)	{		for (j = 1; j <= m; j++)		{			if (i == 1)				board[i][j] = j;			else				board[i][j] = m * (i - 1) + j;		}	}	//for (i = 1; i <= n; i++)	//{	//	for (j = 1; j <= m; j++)	//	{	//		cout << board[i][j] << ' ';	//	}	//	cout << endl;	//}	int count = 0;	for (i = 1; i <= m; i++)	{		for (j = 1; j <= n; j++)		{			count++;			if (count == k)			{				cout << board[j][i] << endl;				return 0;			}		}	}	return 0;}